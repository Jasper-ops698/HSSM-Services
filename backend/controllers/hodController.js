const User = require('../models/User');
const Class = require('../models/Class');
const Enrollment = require('../models/Enrollment');
const Announcement = require('../models/Announcement');
const Notification = require('../models/Notification');

// @desc    Get data for HOD Dashboard, scoped to their department
// @route   GET /api/hod/dashboard
// @access  Private/HOD
const getDashboardData = async (req, res) => {
  try {
    const hodDepartment = req.user.department;

    if (!hodDepartment) {
      return res.status(403).json({ message: 'Access denied. No department assigned to this HOD.' });
    }

    // --- Data Fetching (Scoped to Department) ---
    const teachers = await User.find({ role: 'teacher', department: hodDepartment }).select('name email');
    const classes = await Class.find({ department: hodDepartment }).populate('teacher', 'name');
    
    const classIdsInDepartment = classes.map(c => c._id);
    
    const enrollments = await Enrollment.find({ class: { $in: classIdsInDepartment } })
        .populate('student', 'name email credits')
        .populate('class', 'name autoGenerated creditsRequired');

    // --- KPI Calculation ---
    const totalTeachers = teachers.length;
    const totalClasses = classes.length;
    
    const uniqueStudentIds = new Set();
    enrollments.forEach(enrollment => {
        if(enrollment.status === 'Approved') {
            uniqueStudentIds.add(enrollment.student._id.toString());
        }
    });
    const totalStudentsInDept = uniqueStudentIds.size;

    const pendingEnrollmentsCount = enrollments.filter(e => e.status === 'Pending').length;

    res.json({
      kpi: {
        totalTeachers,
        totalClasses,
        totalStudents: totalStudentsInDept,
        pendingEnrollments: pendingEnrollmentsCount,
      },
      teachers,
      classes,
      enrollments, // Full enrollment details for management
    });
  } catch (error) {
    console.error('Error fetching HOD dashboard data:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// @desc    Create an announcement for the department
// @route   POST /api/hod/announcements
// @access  Private/HOD
const createAnnouncement = async (req, res) => {
  try {
    // Accept either 'message' or 'content' from the client for backwards compatibility
    const { title, message: rawMessage, content, targetRoles: rawTargetRoles } = req.body;
    const message = rawMessage || content;
    const hod = req.user;

    // Ensure targetRoles is an array, providing a default if it's missing or empty
    const targetRoles = (Array.isArray(rawTargetRoles) && rawTargetRoles.length > 0)
      ? rawTargetRoles
      : ['student', 'teacher'];

    // Validate required fields early and return a clear error
    if (!title || !message) {
      return res.status(400).json({ message: 'Title and message are required.' });
    }

    const announcement = new Announcement({
      title,
      message,
      department: hod.department,
      createdBy: hod._id,
      targetRoles,
    });

    await announcement.save();

    // Notify users in the department based on target roles
    const usersToNotify = await User.find({
      department: hod.department,
      role: { $in: targetRoles },
    });

    if (usersToNotify.length > 0) {
      const notifications = usersToNotify.map(user => ({
        recipient: user._id,
        sender: hod._id,
        type: 'new_announcement',
        message: `New announcement in ${hod.department}: ${title}`,
        data: { announcementId: announcement._id },
      }));
      await Notification.insertMany(notifications);
    }

    res.status(201).json({ message: 'Announcement created successfully.', announcement });
  } catch (error) {
    console.error('Error creating announcement:', error);
    res.status(500).json({ message: 'Server error while creating announcement.' });
  }
};

// @desc    Get all students available for enrollment in department
// @route   GET /api/hod/available-students
// @access  Private/HOD
const getAvailableStudents = async (req, res) => {
  try {
    const hodDepartment = req.user.department;

    if (!hodDepartment) {
      return res.status(403).json({ message: 'Access denied. No department assigned to this HOD.' });
    }

    // Get students who don't have this department assigned or have no department
    const availableStudents = await User.find({
      role: 'student',
      $or: [
        { department: { $ne: hodDepartment } },
        { department: { $exists: false } },
        { department: null },
        { department: '' }
      ]
    }).select('name email credits department');

    res.json({
      students: availableStudents,
      department: hodDepartment
    });
  } catch (error) {
    console.error('Error fetching available students:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// @desc    Enroll student into HOD's department
// @route   POST /api/hod/enroll-student
// @access  Private/HOD
const enrollStudentInDepartment = async (req, res) => {
  try {
    const { studentId } = req.body;
    const hodDepartment = req.user.department;

    if (!hodDepartment) {
      return res.status(403).json({ message: 'Access denied. No department assigned to this HOD.' });
    }

    const student = await User.findById(studentId);
    if (!student) {
      return res.status(404).json({ message: 'Student not found.' });
    }

    if (student.role !== 'student') {
      return res.status(400).json({ message: 'User is not a student.' });
    }

    // Update student's department
    student.department = hodDepartment;
    await student.save();

    res.json({
      message: `Student ${student.name} has been enrolled in ${hodDepartment} department.`,
      student: {
        _id: student._id,
        name: student.name,
        email: student.email,
        department: student.department
      }
    });
  } catch (error) {
    console.error('Error enrolling student in department:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

module.exports = {
  getDashboardData,
  createAnnouncement,
  getAvailableStudents,
  enrollStudentInDepartment,
};
