const axios = require('axios');

// Advanced AI System Test Suite
const BASE_URL = 'https://hssm-2-1.onrender.com/api/gemini';

class AdvancedAITester {
  constructor(baseUrl) {
    this.baseUrl = baseUrl;
  }

  async testAIHealth() {
    try {
      console.log('üîç Testing AI Service Health...');
      const response = await axios.get(`${this.baseUrl}/health`);

      console.log('‚úÖ AI Health Check Results:');
      console.log('Service:', response.data.service);
      console.log('Status:', response.data.status);
      console.log('Model:', response.data.model);
      console.log('Features:', response.data.features.join(', '));

      return response.data;
    } catch (error) {
      console.error('‚ùå AI Health Check Failed:', error.response?.data || error.message);
    }
  }

  async testAPIConnection() {
    try {
      console.log('üîå Testing API Connection...');
      const response = await axios.get(`${this.baseUrl}/test`);

      console.log('‚úÖ API Connection Test Results:');
      console.log('Success:', response.data.success);
      console.log('Model:', response.data.model);
      console.log('Response Preview:', response.data.response.substring(0, 100) + '...');

      return response.data;
    } catch (error) {
      console.error('‚ùå API Connection Test Failed:', error.response?.data || error.message);
    }
  }

  async testReportGeneration(token) {
    try {
      console.log('üìÑ Testing Report Generation...');
      const response = await axios.post(`${this.baseUrl}/report`, {
        userId: "507f1f77bcf86cd799439011", // Example user ID
        startDate: "2024-01-01",
        endDate: "2024-12-31"
      }, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('‚úÖ Report Generation Results:');
      console.log('Success:', response.data.success);
      console.log('Report ID:', response.data.reportId);
      console.log('Generated By:', response.data.generatedBy);
      console.log('Report Preview:', response.data.report.substring(0, 200) + '...');

      return response.data;
    } catch (error) {
      console.error('‚ùå Report Generation Test Failed:', error.response?.data || error.message);
    }
  }

  async testAIChat(token) {
    try {
      console.log('üí¨ Testing AI Chat...');
      const response = await axios.post(`${this.baseUrl}/chat`, {
        message: "Hello! Can you help me understand how to use the dashboard?"
      }, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('‚úÖ AI Chat Results:');
      console.log('Success:', response.data.success);
      console.log('User ID:', response.data.userId);
      console.log('AI Response Preview:', response.data.reply.substring(0, 150) + '...');

      return response.data;
    } catch (error) {
      console.error('‚ùå AI Chat Test Failed:', error.response?.data || error.message);
    }
  }

  async testAIStats(token) {
    try {
      console.log('üìä Testing AI Statistics...');
      const response = await axios.get(`${this.baseUrl}/stats`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      console.log('‚úÖ AI Statistics Results:');
      console.log('Total Reports:', response.data.stats.totalReports);
      console.log('Total Chat Messages:', response.data.stats.totalChatMessages);
      console.log('Users with Chats:', response.data.stats.totalUsersWithChats);
      console.log('Recent Reports Count:', response.data.stats.recentReports.length);

      return response.data;
    } catch (error) {
      console.error('‚ùå AI Statistics Test Failed:', error.response?.data || error.message);
    }
  }

  async runAllTests(token) {
    console.log('üöÄ Starting Advanced AI System Test Suite...\n');

    await this.testAIHealth();
    console.log('');

    await this.testAPIConnection();
    console.log('');

    if (token) {
      await this.testReportGeneration(token);
      console.log('');

      await this.testAIChat(token);
      console.log('');

      await this.testAIStats(token);
      console.log('');
    } else {
      console.log('‚ö†Ô∏è  Skipping authenticated tests - no token provided');
      console.log('   To test authenticated endpoints, provide a valid JWT token');
    }

    console.log('üéâ Advanced AI Test Suite Complete!');
  }
}

// Usage example
// Replace 'YOUR_JWT_TOKEN' with an actual JWT token from your application
const tester = new AdvancedAITester(BASE_URL);

// To run all tests without authentication:
// tester.runAllTests();

// To run all tests with authentication:
// tester.runAllTests('YOUR_JWT_TOKEN');

// To run individual tests:
// tester.testAIHealth();
// tester.testAPIConnection();
// tester.testReportGeneration('YOUR_JWT_TOKEN');
// tester.testAIChat('YOUR_JWT_TOKEN');
// tester.testAIStats('YOUR_JWT_TOKEN');

module.exports = AdvancedAITester;